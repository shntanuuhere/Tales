// Mocks generated by Mockito 5.4.6 from annotations
// in tales/test/data/repositories/unsplash_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tales/data/api/unsplash_api_client.dart' as _i3;
import 'package:tales/features/wallpapers/data/models/unsplash_photo.dart' as _i5;
import 'package:tales/features/wallpapers/data/models/unsplash_search_result.dart' as _i2;
import 'package:tales/features/categories/data/models/unsplash_topic.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnsplashSearchResult_0 extends _i1.SmartFake
    implements _i2.UnsplashSearchResult {
  _FakeUnsplashSearchResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UnsplashApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnsplashApiClient extends _i1.Mock implements _i3.UnsplashApiClient {
  MockUnsplashApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.UnsplashPhoto>> getPhotos({
    int? page = 1,
    int? perPage = 10,
    String? orderBy = 'latest',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotos,
          [],
          {
            #page: page,
            #perPage: perPage,
            #orderBy: orderBy,
          },
        ),
        returnValue:
            _i4.Future<List<_i5.UnsplashPhoto>>.value(<_i5.UnsplashPhoto>[]),
      ) as _i4.Future<List<_i5.UnsplashPhoto>>);

  @override
  _i4.Future<_i2.UnsplashSearchResult> searchPhotos({
    required String? query,
    int? page = 1,
    int? perPage = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPhotos,
          [],
          {
            #query: query,
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i4.Future<_i2.UnsplashSearchResult>.value(
            _FakeUnsplashSearchResult_0(
          this,
          Invocation.method(
            #searchPhotos,
            [],
            {
              #query: query,
              #page: page,
              #perPage: perPage,
            },
          ),
        )),
      ) as _i4.Future<_i2.UnsplashSearchResult>);

  @override
  _i4.Future<List<_i6.UnsplashTopic>> getTopics({
    int? page = 1,
    int? perPage = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopics,
          [],
          {
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue:
            _i4.Future<List<_i6.UnsplashTopic>>.value(<_i6.UnsplashTopic>[]),
      ) as _i4.Future<List<_i6.UnsplashTopic>>);

  @override
  _i4.Future<List<_i5.UnsplashPhoto>> getPhotosByTopic({
    required String? topicIdOrSlug,
    int? page = 1,
    int? perPage = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByTopic,
          [],
          {
            #topicIdOrSlug: topicIdOrSlug,
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue:
            _i4.Future<List<_i5.UnsplashPhoto>>.value(<_i5.UnsplashPhoto>[]),
      ) as _i4.Future<List<_i5.UnsplashPhoto>>);

  @override
  _i4.Future<List<_i5.UnsplashPhoto>> getRandomPhotos({
    String? query,
    int? count = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomPhotos,
          [],
          {
            #query: query,
            #count: count,
          },
        ),
        returnValue:
            _i4.Future<List<_i5.UnsplashPhoto>>.value(<_i5.UnsplashPhoto>[]),
      ) as _i4.Future<List<_i5.UnsplashPhoto>>);

  @override
  _i4.Future<void> trackDownload(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #trackDownload,
          [photoId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
